def javaProjects = [
    project(':common'),
    project(':composition-manager')
]

def bootRunProjects = [
    project(':composition-manager')
]

wrapper.gradleVersion = '3.1'

buildscript {
    ext {
        javaVersion = '1.8'
        springBootVersion = '1.4.1.RELEASE'
        gradleVersionsPluginVersion = '0.12.0'
        gradleJaxwsPluginVersion = '1.0.0'
        springGradleDependencyManagemenPluginVersion = '0.5.6.RELEASE'
	gradleDockerPluginVersion = '1.2'

	springDataReleaseTrainVersion = 'Hopper-SR4'
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.github.ben-manes:gradle-versions-plugin:${gradleVersionsPluginVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springGradleDependencyManagemenPluginVersion}"
	classpath "se.transmode.gradle:gradle-docker:${gradleDockerPluginVersion}"
    }
}

apply plugin: "io.spring.dependency-management"

dependencyManagement {
  imports {
    mavenBom "org.springframework.data:spring-data-releasetrain:${springDataReleaseTrainVersion}"
  }
}

configure(allprojects) {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    group = 'org.dofacoma'
    buildDir = 'target'

    ext {
        springVersion = '4.3.3.RELEASE'
        springSecurityVersion = '4.1.3.RELEASE'
        springHateoasVersion = '0.21.0.RELEASE'
        springPluginCoreVersion = '1.2.0.RELEASE'

        thymeleafVersion = '3.0.1.RELEASE'
	thymeleafLayoutDialectVersion = '2.0.0'

        javaxAnnotationVersion = '1.0'

        jacksonVersion = '2.8.1'
        okHttpClientVersion = '3.4.1'

        commonsCodecVersion = '1.10'
        commonsLang3Version = '3.4'
        commonsIoVersion = '2.5'
        commonsCollections4Version = '4.1'
        httpCommonsVersion = '4.5.2'

        lombokVersion = '1.16.10'

        liquibaseVersion = '3.5.1'
        h2DatabaseVersion = '1.4.192'

        equalsVerifierVersion = '2.1.5'
        assertjVersion = '3.5.2'
        jsonPathVersion = '2.2.0'

        gradleDir = "${rootProject.projectDir}/gradle"

        generatedSourcesDir = 'target/generated'
    }

    configurations {
        all {
            resolutionStrategy {
                eachDependency { DependencyResolveDetails details ->
                    if (details.requested.group == 'org.springframework') {
                        details.useVersion springVersion
                    }
                    if (details.requested.group == 'org.springframework.boot') {
                        details.useVersion springBootVersion
                    }
                    if (details.requested.group.startsWith('com.fasterxml.jackson')) {
                        details.useVersion jacksonVersion
                    }
                    if (details.requested.group == 'com.h2database') {
                        details.useVersion h2DatabaseVersion
                    }
                    if (details.requested.group == 'org.thymeleaf') {
                        details.useVersion thymeleafVersion
                    }
                }
                exclude group: 'javax.servlet', module: 'javax.servlet-api'
                exclude group: 'commons-logging', module: 'commons-logging'
                exclude module: 'ha-api'
            }
            exclude group: 'javax.servlet', module: 'javax.servlet-api'
            exclude group: 'commons-logging', module: 'commons-logging'
        }
    }

    idea {
        module {
            excludeDirs += [
                file('bin'),
                file('.metadata'),
                file('.settings'),
                file('work'),
                file('logs')
            ]
            iml { generateTo = rootProject.projectDir }
        }
    }
}

configure(rootProject) {
    idea.project {
        languageLevel = javaVersion
        ipr {
            withXml { provider ->
                def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'

                provider.asNode().component.find { it.@name == 'CompilerConfiguration' }['annotationProcessing'][0].replaceNode {
                    annotationProcessing {
                        profile(default: true, name: 'Default', useClasspath: 'true', enabled: true)
                    }
                }
            }
        }
    }
}

configure(javaProjects) {
    apply plugin: 'java'
    apply plugin: 'com.github.ben-manes.versions'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    compileJava.options*.compilerArgs = [
        "-Xlint:serial",
        "-Xlint:varargs",
        "-Xlint:cast",
        "-Xlint:classfile",
        "-Xlint:dep-ann",
        "-Xlint:divzero",
        "-Xlint:empty",
        "-Xlint:finally",
        "-Xlint:overrides",
        "-Xlint:path",
        "-Xlint:static",
        "-Xlint:try",
        "-Xlint:fallthrough",
        "-Xlint:rawtypes",
        "-Xlint:deprecation",
        "-Xlint:unchecked",
        "-Xlint:-options",
        "-Werror"
    ]

    compileTestJava.options*.compilerArgs = [
        "-Xlint:serial",
        "-Xlint:varargs",
        "-Xlint:cast",
        "-Xlint:classfile",
        "-Xlint:dep-ann",
        "-Xlint:divzero",
        "-Xlint:empty",
        "-Xlint:finally",
        "-Xlint:overrides",
        "-Xlint:path",
        "-Xlint:static",
        "-Xlint:try",
        "-Xlint:-fallthrough",
        "-Xlint:-rawtypes",
        "-Xlint:-deprecation",
        "-Xlint:unchecked",
        "-Xlint:-options",
        "-Xlint:deprecation"
    ]

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    sourceSets {
        generated {
            java { srcDirs = [generatedSourcesDir] }
        }
    }

    dependencies {
        // Utilities
        compile group: 'javax.annotation', name: 'jsr250-api', version: javaxAnnotationVersion
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compile group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version
        compile group: 'commons-io', name: 'commons-io', version: commonsIoVersion
        compile group: 'commons-codec', name: 'commons-codec', version: commonsCodecVersion
        compile group: 'org.apache.commons', name: 'commons-collections4', version: commonsCollections4Version
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        group = 'build'
        description = 'Assembles a jar archive containing the main sources.'
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts { archives sourcesJar }

    clean {
        delete sourceSets.generated.java.srcDirs
    }

    idea {
        module { sourceDirs += file(generatedSourcesDir) }
    }
}

configure(bootRunProjects) {
    apply plugin: 'maven'
    apply plugin: 'application'
    apply plugin: 'spring-boot'
    apply plugin: 'docker'
    
    configurations {
        all {
            resolutionStrategy {
                eachDependency { DependencyResolveDetails details ->
                    if (details.requested.group == 'org.springframework') {
                        details.useVersion springVersion
                    }
                    if (details.requested.group == 'org.springframework.boot') {
                        details.useVersion springBootVersion
                    }
                    if (details.requested.group.startsWith('com.fasterxml.jackson')) {
                        details.useVersion jacksonVersion
                    }
                    if (details.requested.group == 'com.h2database') {
                        details.useVersion h2DatabaseVersion
                    }
                    if (details.requested.group == 'org.thymeleaf') {
                        details.useVersion thymeleafVersion
                    }
                }
                exclude group: 'javax.servlet', module: 'javax.servlet-api'
                exclude group: 'commons-logging', module: 'commons-logging'
                exclude module: 'ha-api'
            }
            exclude group: 'javax.servlet', module: 'javax.servlet-api'
            exclude group: 'commons-logging', module: 'commons-logging'
        }
    }
	
    dependencies {
        // Spring Boot
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springBootVersion
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: springBootVersion
        compile group: 'nz.net.ultraq.thymeleaf', name: 'thymeleaf-layout-dialect', version: thymeleafLayoutDialectVersion
        compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: springBootVersion

	// Spring security
	compile group: 'org.springframework.security', name: 'spring-security-web', version: springSecurityVersion

        // DB
        compile group: 'com.h2database', name: 'h2', version: h2DatabaseVersion

        // Testing
        testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
        testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
    }

    springBoot.backupSource = false

    // System properties to be set when executing `gradle <project>:bootRun`
    applicationDefaultJvmArgs = [
        "-Dspring.profiles.active=default,populate",
        "-Dproject.version=${project.version}"
    ]

    docker {
      baseImage = 'frolvlad/alpine-oraclejdk8:slim'
    }


    task buildDocker(type: Docker, dependsOn: build) {
      push = false
      applicationName = jar.baseName
      doFirst {
	copy {
	  from jar
	  into stageDir
	}
      }
    }
}
